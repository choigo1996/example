&은 자기 자신에게 주는 형상
자식요소는 &을 붙이지않는다.
중앙으로 가게 하는 css-margin: 40px auto;
aspect-ratio가 들어있을때 width와 height에 px값을 넣지말자!!

js
/=디비션(나머지가 아닌 값만 출력
%= 모듈러스(나머지만 출력)

함수
Function
Method
:특별한 일을 따로 독립적으로 처리하고자 만든 방법


1.함수는 선언부와 실행부로 나뉘어 있다.
ex)function 함수1(){....}//선언부
   함수1()://실행주
2.함수는 선언부와 실행부 모두 입력과 출력의 짝을 맞춰줘야 한다.
ex)function 함수1(입력){....return 출력}//선언부
    let x = 함수1(입력);//실행부\

/** 객체 object */
//객체 - 데이터 타입을 가진 변수들 여러개를 모아서 만들어진 것

//원시타입 - 정의되는 시점에 미리 정해진 크기의 메모리를 가짐
//assignment(=)에 의해서 복사됨
//number,string,boolean
//참조타입 - 정의되는 시점에 각자 객체의 크기에 맞게 메모리를 가짐
//assignment(=)에 의해서 복사X
//그 메모리 위치의 참조값만 공유
//object(=객체)

출력법
ex)
1.작성법
const studentobj = {
  // key : value,
  name : "Steve",
  age : 23,
  gender : "male",
  job : "Comedian",
  married : false,
  printName : function() {
    console.log(this.name);
  },
};
2.출력법
일반객체
studentobj.name = "tom"
******console.log(studentobj.name)********
함수객체
*****studentobj.printName()*****

모든 배열은 0부터length-1까지를 사용한다.
foreach는 배열에만 쓸수 있다.

//반복문 for
for (초기식; 조건식; 증감식) {
  조건식의 결과가 참인 동안 반복적으로 실행하고자 하는 실행문;
}

//SEO(검색 엔진 최적화)

//자바스크립트가 DOM으로부터 특정 객체를 접근하려면 3가지 정보를 사용함.
1.태그이름 : ex)document.querySelector("태그이름")
2.ID : ex)document.querySelector("#id이름")
3.Class : ex)document.querySelector(".class이름")

찾는 객체가 여러 개 있을 경우에는 배열로 받아 올 수 있다.
배열로 받아오기 떄문에 반드시 배열로서 사용해야한다.(배열[0]...)
1.태그이름 : ex)document.querySelectorAll("태그이름")
2.ID : ex)document.querySelectorAll("#id이름")
3.Class : ex)document.querySelectorAll(".class이름")
